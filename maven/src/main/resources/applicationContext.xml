<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			    http://www.springframework.org/schema/beans/spring-beans.xsd
			    http://www.springframework.org/schema/context
			    http://www.springframework.org/schema/context/spring-context.xsd
			    http://www.springframework.org/schema/aop
			    http://www.springframework.org/schema/aop/spring-aop.xsd
			    http://www.springframework.org/schema/tx
			    http://www.springframework.org/schema/tx/spring-tx.xsd
			    http://www.springframework.org/schema/mvc
			    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 配置要扫描的包,组件扫描-->
    <context:component-scan base-package="cn.yuren.service"/>

    <!-- 配置spring整合mybatis-->
    <!-- 配置dao层-->
    <!-- 1,配置druid连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3307/maven"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>
    <!--2, 配置整合包中,生产SqlSession的工厂( SqlSessionFactoryBean工厂bean), 因为mybatis操作数据库是靠SqlSession对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置给实体类起别名-->
        <property name="typeAliasesPackage" value="cn.yuren.domain"/>
    </bean>
    <!--3,配置扫描接口包路径,生成包下所有接口的代理对象,并且放入spring容器IoC中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.yuren.dao"/>
    </bean>

    <!-- 配置事务管理器(就是增强类),底层使用的是aop编程模式,
        而aop是面向编程,切面就是切入点和通知的组合,通知就是增强类-->
    <!-- ★配置spring声明式事务三点:事务管理器,事务通知和切面aop-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <!--事务传播行为propagation -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <!-- 全局扫描-->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!-- aop切面-->
    <aop:config>
        <!-- 切入点表达式-->
        <aop:pointcut id="exp" expression="execution(* cn.yuren.service.impl.*.*(..) )"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="exp"/>
        <!--<aop:advisor advice-ref="txAdvice" pointcut="execution(* cn.yuren.service.impl.*.*(..) )"/>-->
    </aop:config>

</beans>